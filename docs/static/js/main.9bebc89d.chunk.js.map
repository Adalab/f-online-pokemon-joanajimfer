{"version":3,"sources":["components/PokemonList/index.js","App.js","services/pokemonAPI.js","serviceWorker.js","index.js"],"names":["PokemonList","_this","this","_this$props","props","fetchingState","pokemonsData","react_default","a","createElement","length","className","map","pokemon","id","key","name","src","sprites","front_default","alt","types","type","icon","role","aria-label","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","localStorage","getItem","isFetching","userQuery","filterPokemons","handleSearchInput","bind","assertThisInitialized","pokemonFetch","_this2","fetch","then","response","json","data","pokemonsCalls","results","url","resp","Promise","all","console","log","setState","saveinLocalStorage","setItem","JSON","stringify","e","userSearch","currentTarget","value","_this$state","filteredPokemons","filter","toLowerCase","includes","newArray","onChange","components_PokemonList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bebc89d.chunk.js","sourcesContent":["import React from 'react';\nimport './PokemonList.css';\n\nclass PokemonList extends React.Component {\n    render() {\n        const { fetchingState, pokemonsData } = this.props;\n\n        if (fetchingState === true) {\n            return (\n                <p>Loading</p>\n            )\n        }\n        else if (pokemonsData.length == 0) {\n            return (\n                <h2>No hay resultados</h2>\n            )\n        } else {\n           \n            return (\n                <section className='pokemonList__section'>\n                    <ul className='pokemonList__list'>\n                        {pokemonsData.map((pokemon, id) => {\n                            return (\n                                <li className='pokemonList__card' key={id}>\n                                    <h3 className='pokemonList__name'>{pokemon.name}</h3>\n                                    <img src={pokemon.sprites.front_default} alt={pokemon.name} className='pokemonList__img' />\n                                    <div className='pokemonList__data'>\n                                    <p className='pokemonList__data--number'># {pokemon.id}</p>\n                                    <ul className='pokemonList__data--types'>{pokemon.types.map((type, id) => {\n                                        switch (type.type.name) {\n                                            case 'poison':\n                                            this.icon = <span role=\"img\" aria-label=\"skull\" className='data__types--icon'>‚ò†Ô∏è</span>;\n                                            break;\n                                            case 'fire':\n                                            this.icon = <span role=\"img\" aria-label=\"fire\">üî•</span>;\n                                            break;\n                                            case 'grass':\n                                            this.icon = <span role=\"img\" aria-label=\"plant\">üåø</span>;\n                                            break;\n                                            case 'flying':\n                                            this.icon = <span role=\"img\" aria-label=\"fly\">ü¶Ö</span>;\n                                            break;\n                                            case 'water':\n                                            this.icon = <span role=\"img\" aria-label=\"water\">üåä</span>;\n                                            break;\n                                            case 'bug':\n                                            this.icon = <span role=\"img\" aria-label=\"bug\">üêõ</span>;\n                                            break;\n                                            case 'normal':\n                                            this.icon = <span role=\"img\" aria-label=\"normal\">üêÄ</span>;\n                                            break;\n                                            case 'electric':\n                                            this.icon = <span role=\"img\" aria-label=\"electric\">‚ö°</span>;\n                                            break;\n                                            default: \n                                            this.icon = type.type.name;\n                                        }\n                                         \n                                        return (\n                                            <li key={id}>{this.icon}</li>\n                                        )\n                                    })}\n                                    </ul>\n                                    </div>\n                                </li>  \n            )})}\n                    </ul>\n                </section>\n            )}}}\n\nexport default PokemonList;","import React, { Component } from 'react';\nimport './App.css';\nimport {pokemonsAPICall} from './services/pokemonAPI';\nimport PokemonList from './components/PokemonList';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemonsData: localStorage.getItem('Pokemon'),\n      isFetching: true, \n      userQuery: '',\n      filterPokemons: ''\n    }\n    this.handleSearchInput = this.handleSearchInput.bind(this);\n  }\n\n  componentDidMount() {\n    this.pokemonFetch()\n  }\n\n  //Fecth to Pokemon API and Promise to wait for all url and then save it in state\n  pokemonFetch() {\n    pokemonsAPICall()\n      .then(data => {\n        const pokemonToSearch = data.results;\n        const pokemonsCalls = pokemonToSearch.map(pokemon => {\n           return fetch(pokemon.url)\n            .then(resp => resp.json())\n        })\n\n        Promise.all (pokemonsCalls)\n          .then(pokemon => {\n            console.log('all pokemons', pokemon)\n            this.setState ({\n              pokemonsData: pokemon, \n              isFetching: false\n            })\n            //Save the info in LS\n            this.saveinLocalStorage();\n          })  \n      })  \n  }\n\n  saveinLocalStorage() {\n    localStorage.setItem('Pokemon', JSON.stringify(this.state.pokemonsData));\n  }\n\n  //Save the user input value in the state \n  handleSearchInput(e) {\n    const userSearch = e.currentTarget.value;\n    this.setState ({\n      userQuery: userSearch\n    })\n   \n  }\n\n  //Filter function based on user seacrh\n  filteredPokemons() {\n    if(this.state.isFetching === false) {\n    const {pokemonsData, userQuery} = this.state;\n    const filteredPokemons = pokemonsData.filter((pokemon) => {\n      if(pokemon.name.toLowerCase().includes(userQuery.toLowerCase())){\n        return true;\n      } else {\n        return false;\n      }\n    })\n    return filteredPokemons;\n  } else {\n    return (\n      <p>Loading...</p>\n    )}}\n\n \n  \n\n  render() {\n    const newArray = this.filteredPokemons();\n    console.log(newArray)\n   \n    return (\n      <div className=\"App\">\n        <header>\n          <h1>POKEDEX</h1>\n        </header>\n        <main>\n          <div>\n            <form>\n              <input type='text'onChange={this.handleSearchInput} value={this.state.userQuery} />\n             \n            </form>\n          </div>\n         <PokemonList pokemonsData={newArray} fetchingState={this.state.isFetching} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const pokemonENDPOINT = 'https://pokeapi.co/api/v2/pokemon?limit=25';\n\nconst pokemonsAPICall = () =>\n fetch(pokemonENDPOINT)\n.then(response => response.json());\n\nexport  {pokemonsAPICall}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}